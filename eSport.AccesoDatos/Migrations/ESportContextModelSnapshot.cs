// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eSport.AccesoDatos;

#nullable disable

namespace eSport.AccesoDatos.Migrations
{
    [DbContext(typeof(ESportContext))]
    partial class ESportContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("eSports.Entidades.Equipo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Integrantes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TorneoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TorneoId");

                    b.ToTable("Equipos");
                });

            modelBuilder.Entity("eSports.Entidades.Juego", b =>
                {
                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("JugadoresPorEquipo")
                        .HasColumnType("int")
                        .HasColumnName("Jugadores por equipo");

                    b.HasKey("Nombre", "JugadoresPorEquipo");

                    b.ToTable("Juegos");
                });

            modelBuilder.Entity("eSports.Entidades.Torneo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GanadorId")
                        .HasColumnType("int");

                    b.Property<int>("JuegoJugadoresPorEquipo")
                        .HasColumnType("int");

                    b.Property<string>("JuegoNombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GanadorId");

                    b.HasIndex("JuegoNombre", "JuegoJugadoresPorEquipo");

                    b.ToTable("Torneos");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Torneo");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("eSports.Entidades.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsuarioId"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UsuarioId");

                    b.ToTable("Usuarios");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Usuario");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("eSports.Entidades.TorneoEliminatoria", b =>
                {
                    b.HasBaseType("eSports.Entidades.Torneo");

                    b.Property<bool>("ConEmpate")
                        .HasColumnType("bit")
                        .HasColumnName("Con empate");

                    b.HasDiscriminator().HasValue("TorneoEliminatoria");
                });

            modelBuilder.Entity("eSports.Entidades.TorneoPorGrupos", b =>
                {
                    b.HasBaseType("eSports.Entidades.Torneo");

                    b.Property<int>("CantidadGrupos")
                        .HasColumnType("int")
                        .HasColumnName("Cantidad de grupos");

                    b.HasDiscriminator().HasValue("TorneoPorGrupos");
                });

            modelBuilder.Entity("eSports.Entidades.Administrador", b =>
                {
                    b.HasBaseType("eSports.Entidades.Usuario");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Administrador");
                });

            modelBuilder.Entity("eSports.Entidades.Equipo", b =>
                {
                    b.HasOne("eSports.Entidades.Torneo", null)
                        .WithMany("equipos")
                        .HasForeignKey("TorneoId");

                    b.OwnsOne("eSports.Entidades.FichaDeEquipo", "Ficha", b1 =>
                        {
                            b1.Property<int>("equipoId")
                                .HasColumnType("int");

                            b1.Property<string>("Descripcion")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("equipoId");

                            b1.ToTable("Equipos");

                            b1.WithOwner("equipo")
                                .HasForeignKey("equipoId");

                            b1.Navigation("equipo");
                        });

                    b.Navigation("Ficha")
                        .IsRequired();
                });

            modelBuilder.Entity("eSports.Entidades.Torneo", b =>
                {
                    b.HasOne("eSports.Entidades.Equipo", "Ganador")
                        .WithMany()
                        .HasForeignKey("GanadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eSports.Entidades.Juego", "Juego")
                        .WithMany()
                        .HasForeignKey("JuegoNombre", "JuegoJugadoresPorEquipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ganador");

                    b.Navigation("Juego");
                });

            modelBuilder.Entity("eSports.Entidades.Torneo", b =>
                {
                    b.Navigation("equipos");
                });
#pragma warning restore 612, 618
        }
    }
}
